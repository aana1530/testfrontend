<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.11">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <EnvInjectJobProperty plugin="envinject@2.1">
      <info>
        <propertiesFilePath>/ipdata/ip.properties</propertiesFilePath>
        <propertiesContent>$IP</propertiesContent>
        <secureGroovyScript plugin="script-security@1.27">
          <script></script>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
    </EnvInjectJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.33">
    <script>node {
   def mvnHome
   def version
   stage(&apos;Preparation&apos;) { // for display purposes
      // Get some code from a GitHub repository
      git &apos;https://github.com/code-distillery/aem-sample-project.git&apos;
      // Get the Maven tool.
      // ** NOTE: This &apos;M3&apos; Maven tool must be configured
      // **       in the global configuration.           
      mvnHome = tool &apos;maven&apos;
      version=&apos;3.3.9&apos;
      echo &quot;\u2600 BUILD_URL=${env.JENKINS_URL}&quot;
   }
   stage(&apos;Build&apos;) {
      // Run the maven build
      if (isUnix()) {
         sh &quot;&apos;${mvnHome}/bin/mvn&apos; -Dmaven.test.failure.ignore clean package&quot;
      } else {
         bat(/&quot;${mvnHome}\bin\mvn&quot; -Dmaven.test.failure.ignore clean package/)
      }
   }
  // stage(&apos;Results&apos;) {
    //  junit &apos;**/target/surefire-reports/TEST-*.xml&apos;
      //archive &apos;target/*.jar&apos;
  // }
  // stage(&apos;Sonar Analysis&apos;) {
    //  build &apos;Sonar_Jenkins&apos;
  // }
  
//  stage(&apos;SonarQube analysis&apos;) {
  //  withSonarQubeEnv(&apos;SONAR&apos;) {
      // requires SonarQube Scanner for Maven 3.2+
    //  sh &apos;mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.2:sonar&apos;
//    }
 // }
  // stage(&apos;Publish&apos;) {
    // nexusPublisher nexusInstanceId: &apos;NEXUS&apos;, nexusRepositoryId: &apos;Release&apos;, packages: [[$class: &apos;MavenPackage&apos;, mavenAssetList: [[classifier: &apos;&apos;, extension: &apos;&apos;, filePath: &apos;addressbook_main/target/addressbook.war&apos;]], mavenCoordinate: [artifactId: &apos;addressbook_main&apos;, groupId: &apos;com.edurekademo.tutorial&apos;, packaging: &apos;war&apos;, version: &apos;2.3.0&apos;]]]
   //}
   //stage(&apos;Deploy approval&apos;){
    //input &quot;Deploy to prod?&quot;
//}

  //  stage(&apos;Send E-mail&apos;){
    //    emailext body: &apos;Deployment Approved by MANAGER&apos;, subject: &apos;Deployment Approved&apos;, to: &apos;aashna1516@yahoo.com&apos;
    //}
   
   stage(&apos;Deploy To AEM&apos;){
    sh &apos;&apos;&apos;curl -u admin:admin -F file=@&quot;$WORKSPACE/package/target/aem-sample-project-package-1.0.0-SNAPSHOT.zip&quot; -F name=&quot;aem-sample-project-package-1.0.0-SNAPSHOT.zip&quot; -F force=true -F install=true http://&quot;$IP&quot;:4502/crx/packmgr/service.jsp
&apos;&apos;&apos;

    }
}

</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>